{
	"openapi": "3.0.2",
	"info": {
		"title": "Impact API",
		"version": "1.0"
	},
	"servers": [
		{
			"url": "https://joinimpact.org/api/v1"
		}
	],
	"components": {
		"schemas": {
			"user": {
				"type": "object",
				"description": "Represents a user, whether they are a volunteer or organization manager.",
				"required": [
					"firstName",
					"lastName",
					"email",
					"password",
					"dateOfBirth",
					"zipCode"
				],
				"properties": {
					"firstName": {
						"type": "string",
						"minLength": 2,
						"maxLength": 48,
						"example": "Yury"
					},
					"lastName": {
						"type": "string",
						"minLength": 2,
						"maxLength": 48,
						"example": "Orlovskiy"
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"password": {
						"type": "string",
						"minLength": 8,
						"maxLength": 512,
						"example": "hunter2!"
					},
					"dateOfBirth": {
						"type": "string",
						"format": "date",
						"example": "2003-07-28T00:00:00Z"
					},
					"zipCode": {
						"type": "string",
						"minLength": 5,
						"maxLength": 7,
						"description": "Subject to change, I'm looking into how to submit location data."
					}
				}
			},
			"tokenPairResponse": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "string",
						"description": "The user's ID (for redundancy). This can also be found in the body of the JWT. All ID's are sent as strings to avoid rounding issues.",
						"example": "112751457261385472"
					},
					"tokenPair": {
						"type": "object",
						"properties": {
							"authToken": {
								"type": "string",
								"description": "The newly generated JSON Web Token. Will be used in most API requests under the Authorization header. Good for 3 days.",
								"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjowLCJ1c2VySWQiOiIxMTI3NTE0NTcyNjEzODU0NzIiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImltcGFjdC1wcm9kLTAxIiwiZXhwIjoxNTkyNjEzMjE3fQ.YMQ9Fjpr0uWUcvH0lx2w1BVNttEbeVVzwMFkqADO8y4"
							},
							"authExpiry": {
								"type": "integer",
								"description": "The epoch of token expiry for the auth token."
							},
							"refreshToken": {
								"type": "string",
								"description": "The user's refresh token. Will be used to get a new token pair after the auth token expires. Good for 21 days.",
								"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoxLCJ1c2VySWQiOiIxMTI3NTE0NTcyNjEzODU0NzIiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImltcGFjdC1wcm9kLTAxIiwiZXhwIjoxNTk0MDgyMTM4fQ.Sc_WdFxs67Awd9-_ZEf7V_y6k7m9vVu4u5oYs8wZrhI"
							},
							"refreshExpiry": {
								"type": "integer",
								"description": "The epoch of token expiry for the refresh token."
							}
						}
					}
				}
			},
			"success": {
				"type": "object",
				"description": "A request was successful, with no extra data needed to be sent.",
				"properties": {
					"data": {
						"type": "object",
						"properties": {
							"success": {
								"type": "boolean",
								"example": true
							}
						},
						"example": {
							"success": true
						}
					}
				}
			}
		}
	},
	"paths": {
		"/auth/register": {
			"post": {
				"summary": "Creates a new user and returns a token pair on success.",
				"tags": [
					"Authentication"
				],
				"requestBody": {
					"description": "Contains information about the user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/user"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success! A user was created, and the response contains a token pair and the user ID to use for authentication.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/tokenPairResponse"
								}
							}
						}
					},
					"400": {
						"description": "One or more fields are wrong, or a user with the email already exists.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"errors": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"code": {
														"type": "number"
													},
													"message": {
														"type": "string"
													},
													"invalidFields": {
														"type": "array"
													}
												}
											},
											"example": [
												{
													"code": 10,
													"message": "email already exists"
												},
												{
													"code": 98,
													"message": "missing or invalid fields",
													"invalidFields": [
														"password"
													]
												}
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"summary": "Attempts to login using the credentials provided. Returns a token pair on success.",
				"tags": [
					"Authentication"
				],
				"requestBody": {
					"description": "Contains a username and password used to authenticate the user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": [
									"email",
									"password"
								],
								"properties": {
									"email": {
										"type": "string",
										"minLength": 4,
										"maxLength": 56,
										"example": "tyler@joinimpact.org"
									},
									"password": {
										"type": "string",
										"minLength": 8,
										"maxLength": 512,
										"example": "hunter2!"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success! The body of this response will contain a token pair that should be stored in order to make authenticated API requests.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"userId": {
											"type": "string",
											"description": "The user's ID (for redundancy). This can also be found in the body of the JWT. All ID's are sent as strings to avoid rounding issues.",
											"example": "112751457261385472"
										},
										"issuedAt": {
											"type": "string",
											"format": "date-time",
											"description": "The time at which the tokens were issued (measured by the server). Used to calculate token expiration time, if necessary.",
											"example": "2018-01-18T01:30:22Z"
										},
										"tokenPair": {
											"type": "object",
											"properties": {
												"authToken": {
													"type": "string",
													"description": "The newly generated JSON Web Token. Will be used in most API requests under the Authorization header. Good for 3 days.",
													"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjowLCJ1c2VySWQiOiIxMTI3NTE0NTcyNjEzODU0NzIiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImltcGFjdC1wcm9kLTAxIiwiZXhwIjoxNTkyNjEzMjE3fQ.YMQ9Fjpr0uWUcvH0lx2w1BVNttEbeVVzwMFkqADO8y4"
												},
												"refreshToken": {
													"type": "string",
													"description": "The user's refresh token. Will be used to get a new token pair after the auth token expires. Good for 21 days.",
													"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoxLCJ1c2VySWQiOiIxMTI3NTE0NTcyNjEzODU0NzIiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImltcGFjdC1wcm9kLTAxIiwiZXhwIjoxNTk0MDgyMTM4fQ.Sc_WdFxs67Awd9-_ZEf7V_y6k7m9vVu4u5oYs8wZrhI"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Either the email or password was incorrect."
					}
				}
			}
		},
		"/auth/tokens/refresh": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Generates a new token pair from a refresh token.",
				"requestBody": {
					"description": "Contains a refresh token.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": [
									"refreshToken"
								],
								"properties": {
									"refreshToken": {
										"type": "string",
										"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoxLCJ1c2VySWQiOiIxMTI3NTE0NTcyNjEzODU0NzIiLCJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImltcGFjdC1wcm9kLTAxIiwiZXhwIjoxNTk0MDgyMTM4fQ.Sc_WdFxs67Awd9-_ZEf7V_y6k7m9vVu4u5oYs8wZrhI"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success! The body of this response will contain a token pair that should be stored in order to make authenticated API requests.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/tokenPairResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid refresh token. Please require the user to log in again."
					}
				}
			}
		},
		"/auth/password-resets": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Creates a new password reset request and emails the link to the user.",
				"requestBody": {
					"description": "Includes the users email to send the request to.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": [
									"email"
								],
								"properties": {
									"email": {
										"type": "string",
										"example": "tyler@joinimpact.org"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success! The reset password email was sent.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/success"
								}
							}
						}
					},
					"400": {
						"description": "Invalid email.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"errors": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"code": {
														"type": "number"
													},
													"message": {
														"type": "string"
													},
													"invalidFields": {
														"type": "array"
													}
												}
											},
											"example": [
												{
													"code": 98,
													"message": "missing or invalid fields",
													"invalidFields": [
														"email"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "User not found."
					}
				}
			}
		},
		"/auth/password-resets/{passwordResetKey}": {
			"get": {
				"tags": [
					"Authentication"
				],
				"summary": "Gets a password reset object. If valid, it returns a first name and email to render a form with.",
				"responses": {
					"200": {
						"description": "Success! The password reset object was found!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"firstName": {
											"type": "string",
											"example": "Tyler"
										},
										"email": {
											"type": "string",
											"example": "tyler@joinimpact.org"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Password reset object not found, invalid key."
					}
				}
			}
		},
		"/auth/password-resets/{passwordResetKey}/reset": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Resets the user's password from a password reset key.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"password": {
										"type": "string",
										"description": "The new password for the user.",
										"minLength": 8,
										"maxLength": 512,
										"example": "hunter3!"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success! The user's password was changed.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/success"
								}
							}
						}
					},
					"400": {
						"description": "Invalid password.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"errors": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"code": {
														"type": "number"
													},
													"message": {
														"type": "string"
													},
													"invalidFields": {
														"type": "array"
													}
												}
											},
											"example": [
												{
													"code": 98,
													"message": "missing or invalid fields",
													"invalidFields": [
														"password"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Password reset object not found, invalid key."
					}
				}
			}
		},
		"/users/{userID}/profile": {
			"get": {
				"summary": "Gets the profile of a single user by ID.",
				"parameters": [
					{
						"in": "path",
						"name": "userID",
						"description": "The ID of the user who you are querying. You can use 'me' to refer to the currently logged in user.",
						"schema": {
							"type": "integer"
						},
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success! A user profile was returned.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"profilePicture": {
													"type": "string",
													"example": "https://cdn.joinimpact.org/profile-picture-1273884565403865088-1593076042.png"
												},
												"firstName": {
													"type": "string",
													"example": "Tyler"
												},
												"lastName": {
													"type": "string",
													"example": "Lafayette"
												},
												"dateOfBirth": {
													"type": "string",
													"example": "2003-07-28T00:00:00Z"
												},
												"zipCode": {
													"type": "string",
													"description": "May change",
													"example": "Menlo Park, CA, US 94025"
												},
												"tags": {
													"type": "array",
													"description": "The user's areas of interest.",
													"items": {
														"type": "object",
														"properties": {
															"id": {
																"type": "integer",
																"example": "1283918398189"
															},
															"name": {
																"type": "string",
																"example": "Research"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"patch": {
				"summary": "Updates a user's profile. Non-filled fields will be ignored.",
				"parameters": [
					{
						"in": "path",
						"name": "userID",
						"description": "The ID of the user who you are querying. You can use 'me' to refer to the currently logged in user.",
						"schema": {
							"type": "integer"
						},
						"required": true
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "object",
										"properties": {
											"firstName": {
												"type": "string",
												"example": "Tyler"
											},
											"lastName": {
												"type": "string",
												"example": "Lafayette"
											},
											"dateOfBirth": {
												"type": "string",
												"example": "2003-07-28T00:00:00Z"
											},
											"zipCode": {
												"type": "string",
												"description": "May change",
												"example": "Menlo Park, CA, US 94025"
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Profile updated successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/success"
								}
							}
						}
					}
				}
			}
		}
	}
}